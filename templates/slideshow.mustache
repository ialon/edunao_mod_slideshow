{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template mod_slideshow/slideshow

    IDs required for JS:
    * all

    Classes required for JS:
    * none

    Data attributes required for JS:
    * none

    Context variables required for this template:
    * slides
}}

<div class="generalbox center clearfix">
    <ul id="slide-list" data-cmid="{{slideshow}}">
        {{#slides}}
            <li class="slide-item no-swipe group" data-sortorder="{{sortorder}}" data-id="{{id}}">
                <div class="handle instant">{{sortorder}}</div>
                <div class="name">{{name}}</div>
                <div class="actions">
                    <a href="#" onclick="confirmDeleteSlide({{id}})" title="{{#str}}delete, slideshow{{/str}}">
                        {{#pix}} i/trash, core {{/pix}}
                    </a>
                    <a href="#" onclick="hideShowSlide({{id}}, 'show')" title="{{#str}}show, slideshow{{/str}}" class="show {{^hidden}}hidden{{/hidden}}">
                        {{#pix}} i/hide, core {{/pix}}
                    </a>
                    <a href="#" onclick="hideShowSlide({{id}}, 'hide')"  title="{{#str}}hide, slideshow{{/str}}" class="hide {{#hidden}}hidden{{/hidden}}">
                        {{#pix}} i/show, core {{/pix}}
                    </a>
                    <a href="/mod/slideshow/edit.php?cm={{slideshow}}&id={{id}}" title="{{#str}}edit, slideshow{{/str}}">
                        {{#pix}} t/edit, core {{/pix}}
                    </a>
                </div>
            </li>
        {{/slides}}
    </ul>
</div>
{{#js}}
require(['core/config', 'jquery', 'core/modal_save_cancel', 'core/modal_events'], function(Config, $, ModalSaveCancel, ModalEvents) {
    var ul = document.querySelector('#slide-list[data-cmid="{{slideshow}}"]');

    ul.addEventListener('slip:beforereorder', function(e){
        if (/demo-no-reorder/.test(e.target.className)) {
            e.preventDefault();
        }
    }, false);

    ul.addEventListener('slip:beforeswipe', function(e){
        if (e.target.nodeName == 'INPUT' || /no-swipe/.test(e.target.className)) {
            e.preventDefault();
        }
    }, false);

    ul.addEventListener('slip:beforewait', function(e){
        if (e.target.className.indexOf('instant') > -1) e.preventDefault();
    }, false);

    ul.addEventListener('slip:reorder', function(e){
        e.target.parentNode.insertBefore(e.target, e.detail.insertBefore);

        let slideid = e.target.dataset.id;
        let oldorder = e.detail.originalIndex + 1;
        let neworder = e.detail.spliceIndex + 1;

        // console.log("Reorder slide ID " + slideid + " from " + oldorder + " to " + neworder);

        if (neworder !== oldorder) {
            changeSortOrder(slideid, neworder, oldorder);
        }
        return false;
    }, false);

    new Slip(ul); 

    var items = document.querySelectorAll(".handle");

    for (var i=0; i < items.length; i++) {
        var item = items[i]
        item.addEventListener('mousedown', function(){
            this.style.cursor = "-webkit-grabbing";
            this.style.cursor = "-moz-grabbing";
        });
        item.addEventListener('mouseover', function(){
            this.style.cursor = "-webkit-grab";
            this.style.cursor = "-moz-grab";
        });
        item.addEventListener('mouseup', function(){
            this.style.cursor = "-webkit-grab";
            this.style.cursor = "-moz-grab";
        });
    }

    /**
    * Change sort order
    * @param {Number} Slide ID
    * @param {Number} New order
    * @param {Number} Old order
    */
    changeSortOrder = (slideid, neworder, oldorder) => {
        var ul = document.querySelector('#slide-list[data-cmid="{{slideshow}}"]');

        let URL = Config.wwwroot + '/mod/slideshow/ajax.php';
        let data = {
            slideid: slideid,
            action: 'reorder',
            neworder: neworder,
            oldorder: oldorder,
            sesskey: Config.sesskey
        };
        let settings = {
            type: 'GET',
            dataType: 'json',
            data: data,
            async: false
        };

        $.ajax(URL, settings)
        .done(function() {
            updateSortorderUI(ul);
        });
    };

    /**
    * Update sort order numbers in UI
    * @param {Element} Slide list
    */
    updateSortorderUI = (ul) => {
        let sortorder = 1;
        let slides = ul.querySelectorAll('.slide-item');
        slides.forEach(function(slide) {
            slide.dataset.sortorder = sortorder;
            let handle = slide.querySelector('.handle');
            handle.textContent = sortorder;
            sortorder++;
        });
    };

    /**
    * Hide/show slide
    * @param {Number} Slide ID
    * @param {String} Action
    */
    hideShowSlide = (slideid, action) => {
        var ul = document.querySelector('#slide-list[data-cmid="{{slideshow}}"]');

        let URL = Config.wwwroot + '/mod/slideshow/ajax.php';
        let data = {
            slideid: slideid,
            action: action,
            sesskey: Config.sesskey
        };
        let settings = {
            type: 'GET',
            dataType: 'json',
            data: data,
            async: false
        };

        $.ajax(URL, settings)
        .done(function(response) {
            let slide = ul.querySelector('.slide-item[data-id="' + slideid + '"]');
            let hide = slide.querySelector('.actions .hide');
            let show = slide.querySelector('.actions .show');

            if (response.action === 'show') {
                hide.classList.remove('hidden');
                show.classList.add('hidden');
            } else {
                hide.classList.add('hidden');
                show.classList.remove('hidden');
            }
        });
    };

    /**
    * Confirm slide deletion
    * @param {Number} Slide ID
    */
    confirmDeleteSlide = (slideid) => {
        ModalSaveCancel.create({
            title: "{{#str}}delete, slideshow{{/str}}",
            body: "{{#str}}deleteconfirm, slideshow{{/str}}",
            removeOnClose: true,
            buttons: {
                save: "{{#str}}confirm, slideshow{{/str}}",
            },
            show: true,
        })
        .then((modal) => {
            modal.getRoot().on(ModalEvents.save, function() {
                deleteSlide(slideid);
            });

            modal.show();
        });
    };

    /**
    * Delete slide
    * @param {Number} Slide ID
    */
    deleteSlide = (slideid) => {
        var ul = document.querySelector('#slide-list[data-cmid="{{slideshow}}"]');

        let URL = Config.wwwroot + '/mod/slideshow/ajax.php';
        let data = {
            slideid: slideid,
            action: 'delete',
            sesskey: Config.sesskey
        };
        let settings = {
            type: 'GET',
            dataType: 'json',
            data: data,
            async: false
        };

        $.ajax(URL, settings)
        .done(function(response) {
            let slide = ul.querySelector('.slide-item[data-id="' + slideid + '"]');

            if (response.result) {
                slide.remove();
                updateSortorderUI(ul);
            }
        });
    };
});
{{/js}}
